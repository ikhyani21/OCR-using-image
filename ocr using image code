# -*- coding: utf-8 -*-
"""OCR using Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F1FRXJDe2SmAmyErV65VJ5JpMlU1lIXb
"""

import requests

#downloading tesseract

r =requests.get("https://raw.githubusercontent.com/tesseract-ocr/tessdata/4.00/ind.traineddata", stream = True)

#writing data to file to avooid path issues
with open("/usr/share/tesseract-ocr/4.00/tessdata/ind.traineddata", "wb") as file:
  for block in r.iter_content(chunk_size = 1024):
    if block:
      file.write(block)

# installing libraries required for ocr
! apt install tesseract-ocr libtesseract-dev libmagickwand-dev

#importing IPython to clear output which is not important
from IPython.display import HTML, clear_output
clear_output()

! pip install pytesseract wand opencv-python
clear_output()

from PIL import Image
import pytesseract
import cv2
import numpy as np
from pytesseract import Output
import re

image = Image.open(requests.get('https://i.stack.imgur.com/IvV2y.png', stream = True).raw)
image = image.resize((500, 300))
image.save('sample.png')
image

custom_config = r' -l eng --oem 3 ==psm 6'
text = pytesseract.image_to_string(image, config = custom_config)
print(text)

# to remove irrelevant symbols
try:
  text = pytesseract.image_to_string(image, lang = "eng")
  characters_to_remove = "!()@-*>+-/,'.|#$%^&~`"
  new_string = text
  for character in characters_to_remove:
    new_string = new_string.replace(character, "")
  print(new_string)
except IOError as e:
  print("Error (%s). " % e)

# when the images are complex
image1 = Image.open(requests.get('https://images.deepai.org/machine-learning-models/12c2739f80e240da906cef226f6f6d05/text.png', stream = True).raw)
image1 = image1.resize((500, 300))
image1.save('sample1.png')
image1

image1 = cv2.imread('sample1.png')

def get_grayscale(image1):
  return cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)

gray = get_grayscale(image1)
Image.fromarray(gray)

#noise removal
def remove_noise(image1):
  return cv2.medianBlur(image1, 5)

noise = remove_noise(gray)
Image.fromarray(gray)

#threshold transformation
def threshold(image1):
  return cv2.threshold(image1, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

thresh = threshold(gray)
Image.fromarray(thresh)

#erosion
def erode(image1):
  kernel = np.ones((5,5), np.uint8)
  return cv2.erode(image1, kernel, iterations = 1)

erode = erode(gray)
Image.fromarray(erode)

#morphology

def opening(image1):
  kernel = np.ones((5,5), np.uint8)
  return cv2.morphologyEx(image1, cv2.MORPH_OPEN, kernel)

opening = opening(gray)
Image.fromarray(opening)

#canny edge detecttion
def canny(image1):
  return cv2.Canny(image1, 100, 200)

canny = canny(gray)
Image.fromarray(canny)

#skew correction

def deskew(image1):
  coords = np.column_stack(np.where(image1 > 0))
  angle = cv2.minAreaRect(coords)[-1]

  if angle < 45:
    angle = (90+angle)
  else:
    angle = angle

  (h,w) = image1.shape[:2]
  center = (w // 2, h // 2)
  M = cv2.getRotationMatrix2D(center, angle, 1.0)
  rotated = cv2.warpAffine(image1,M, (w,h), flags = cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
  return rotated

rotated = deskew(gray)
Image.fromarray(rotated)

#template matching
def match_template(image1, template):
  return cv2.matchTemplate(image1, template, cv2.TM_CCOEFF_NORMED)

match = match_template(gray, gray)
match

img = cv2.imread('sample1.png')
h, w, c = img.shape
boxes = pytesseract.image_to_boxes(img)
for b in boxes.splitlines():
  b = b. split(' ')
  img =  cv2.rectangle(img, (int(b[1]), h - int(b[2])), (int(b[3]), h - int(b[4])), (0,255,0), 2)

Image.fromarray(img)

